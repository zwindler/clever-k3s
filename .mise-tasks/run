#! /bin/bash

K8S_VERSION=1.33.2
ETCD_VERSION=3.5.18
ARCH=amd64

mkdir -p bin/

curl -L https://dl.k8s.io/v$K8S_VERSION/kubernetes-server-linux-$ARCH.tar.gz -o kubernetes-server-linux-$ARCH.tar.gz
tar -zxf kubernetes-server-linux-${ARCH}.tar.gz
for BINARY in kubectl kube-apiserver kube-scheduler kube-controller-manager kubelet kube-proxy;
do
  mv kubernetes/server/bin/${BINARY} .
done
rm kubernetes-server-linux-${ARCH}.tar.gz
rm -rf kubernetes

# add kubectl autocomplete
echo 'source <(kubectl completion bash)' >>~/.bashrc

mv kube* bin/

mkdir etcd-data
chmod 700 etcd-data

curl -L https://github.com/cloudflare/cfssl/releases/download/v1.6.5/cfssljson_1.6.5_linux_amd64 -o cfssljson_1.6.5_linux_amd64
mv cfssljson_1.6.5_linux_amd64 bin/cfssljson
chmod +x bin/cfssljson

ls bin/

mkdir certs && cd certs

{
cat > ca-config.json <<EOF
{
  "signing": {
    "default": {
      "expiry": "8760h"
    },
    "profiles": {
      "kubernetes": {
        "usages": ["signing", "key encipherment", "server auth", "client auth"],
        "expiry": "8760h"
      }
    }
  }
}
EOF

cat > ca-csr.json <<EOF
{
  "CN": "Kubernetes",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "FR",
      "L": "Pessac",
      "O": "Kubernetes",
      "OU": "CA",
      "ST": "Nouvelle Aquitaine"
    }
  ],
  "hosts": [
    "127.0.0.1",
    "localhost",
    "dumberk8s.zwindler.fr"
  ]
}
EOF
cfssl gencert -initca ca-csr.json | ../bin/cfssljson -bare ca
}

{
cat > admin-csr.json <<EOF
{
  "CN": "admin",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "FR",
      "L": "Pessac",
      "O": "system:masters",
      "OU": "dumber k8s",
      "ST": "Nouvelle Aquitaine"
    }
  ],
  "hosts": [
    "127.0.0.1",
    "localhost",
    "dumberk8s.zwindler.fr"
  ]
}
EOF
cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca-config.json \
  -profile=kubernetes \
  admin-csr.json | ../bin/cfssljson -bare admin
}

cd ..

ls certs/

ls bin/

export KUBECONFIG=admin.conf
kubectl config set-cluster dumberk8s \
  --certificate-authority=certs/ca.pem \
  --embed-certs=true \
  --server=https://127.0.0.1:4040

kubectl config set-credentials admin \
  --embed-certs=true \
  --client-certificate=certs/admin.pem \
  --client-key=certs/admin-key.pem

kubectl config set-context admin \
  --cluster=dumberk8s \
  --user=admin

kubectl config use-context admin

mkdir -p ~/.kube && cp admin.conf ~/.kube/config

CERTS_OPTS="--client-cert-auth \
           --cert-file=certs/admin.pem \
           --key-file=certs/admin-key.pem \
           --trusted-ca-file=certs/ca.pem"

FORCE_HTTPS_OPTS="--advertise-client-urls https://127.0.0.1:2379 \
                  --listen-client-urls https://127.0.0.1:2379"

etcd --data-dir etcd-data $CERTS_OPTS $FORCE_HTTPS_OPTS &

CERTS_OPTS="--client-ca-file=certs/ca.pem \
            --tls-cert-file=certs/admin.pem \
            --tls-private-key-file=certs/admin-key.pem \
            --service-account-key-file=certs/admin.pem \
            --service-account-signing-key-file=certs/admin-key.pem \
            --service-account-issuer=https://kubernetes.default.svc.cluster.local"

ETCD_OPTS="--etcd-cafile=certs/ca.pem \
           --etcd-certfile=certs/admin.pem \
           --etcd-keyfile=certs/admin-key.pem \
           --etcd-servers=https://127.0.0.1:2379"

bin/kube-apiserver ${CERTS_OPTS} ${ETCD_OPTS} \
            --allow-privileged \
	        --authorization-mode=Node,RBAC \
            --secure-port 4040 &

            #!/bin/bash
CERTS_OPTS="--cluster-signing-cert-file=certs/ca.pem \
            --cluster-signing-key-file=certs/ca-key.pem \
            --service-account-private-key-file=certs/admin-key.pem \
            --root-ca-file=certs/ca.pem"

bin/kube-controller-manager ${CERTS_OPTS} \
--kubeconfig admin.conf \
--use-service-account-credentials \
--cluster-cidr=10.0.0.0/16 \
--allocate-node-cidrs=true &

bin/kube-scheduler --kubeconfig admin.conf &

websocat -s 8080